name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'angular.json'
      - 'Dockerfile'
      - 'nginx.conf'
      - 'docker-compose.frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'angular.json'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Job 1: Tests et qualit√© du code
  test:
    name: Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint || echo "Lint warnings found"
      continue-on-error: true

    - name: Run unit tests
      run: npm run test:headless

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
      continue-on-error: true

    - name: Build production
      run: npm run build:prod

    - name: Check build size
      run: |
        echo "Build size analysis:"
        ls -lah dist/projecthub-frontend/ || true
        du -sh dist/projecthub-frontend/ || true

  # Job 2: S√©curit√© et audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate
      continue-on-error: true

  # Job 3: Build et test Docker
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        networks: host

    - name: Test Docker image
      run: |
        docker run -d --name test-frontend -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || docker run -d --name test-frontend -p 8080:80 projecthub-frontend:latest
        sleep 15
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ | grep -q "ProjectHub" || exit 1
        docker stop test-frontend
        docker rm test-frontend

  # Job 4: Analyse de performance
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        docker run -d --name lighthouse-test -p 9001:80 projecthub-frontend:latest
        sleep 10
        lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:9001
        docker stop lighthouse-test
        docker rm lighthouse-test
      continue-on-error: true

  # Job 5: Notification de d√©ploiement
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Success notification
      if: ${{ needs.test.result == 'success' && needs.docker.result == 'success' }}
      run: |
        echo "‚úÖ Frontend deployment successful!"
        echo "üê≥ Docker image pushed to registry"
        echo "üöÄ Ready for production deployment"

    - name: Failure notification
      if: ${{ needs.test.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "‚ùå Frontend deployment failed!"
        echo "Please check the logs and fix the issues"
        exit 1

  # Job 6: Auto-merge dependabot PRs (optionnel)
  dependabot:
    name: Auto-merge Dependabot
    runs-on: ubuntu-latest
    needs: [test, security]
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}

    steps:
    - name: Dependabot metadata
      id: metadata
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Auto-merge minor updates
      if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor' }}
      run: gh pr merge --auto --merge "$PR_URL"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
