name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'angular.json'
      - 'Dockerfile'
      - 'nginx.conf'
      - 'docker-compose.frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'angular.json'

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: projecthub-frontend

jobs:
  # Job 1: Tests et build
  test-and-build:
    name: Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Installation avec gestion d'erreur propre
    - name: Install dependencies
      run: |
        npm ci || npm install --legacy-peer-deps
        echo "Dependencies installed successfully"

    # Tests unitaires (sans continue-on-error)
    - name: Run unit tests
      run: |
        npm run test:headless
        echo "‚úÖ Tests completed successfully"

    # Build production (obligatoire)
    - name: Build production
      run: |
        npm run build:prod
        echo "‚úÖ Production build completed"

    # V√©rification critique des artifacts
    - name: Verify build artifacts
      run: |
        if [ ! -d "dist/projecthub-frontend" ]; then
          echo "‚ùå Dist folder missing!"
          exit 1
        fi

        if [ ! -f "dist/projecthub-frontend/index.html" ]; then
          echo "‚ùå index.html missing!"
          ls -la dist/projecthub-frontend/
          exit 1
        fi

        echo "‚úÖ Build artifacts verified"
        echo "Build size: $(du -sh dist/projecthub-frontend/)"

        # V√©rifier que les assets sont pr√©sents
        if [ -d "dist/projecthub-frontend/assets" ]; then
          echo "‚úÖ Assets folder present"
        fi

    # Upload des artifacts pour debug
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-artifacts
        path: dist/projecthub-frontend/
        retention-days: 7

  # Job 2: Analyse de s√©curit√©
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci || npm install --legacy-peer-deps

    # Audit s√©curitaire - on accepte moderate mais pas high
    - name: Security audit
      run: |
        npm audit --audit-level=moderate
        echo "‚úÖ Security audit passed"

  # Job 3: Docker build et test
  docker-build-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test-and-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        echo "‚úÖ Docker image built successfully"

    - name: Test Docker image
      run: |
        # Lancer le container
        docker run -d --name test-frontend -p 8080:80 ${{ env.DOCKER_IMAGE_NAME }}:latest

        # Attendre le d√©marrage
        echo "Waiting for container to start..."
        sleep 20

        # V√©rifier que le container est running
        if ! docker ps | grep -q test-frontend; then
          echo "‚ùå Container not running!"
          docker logs test-frontend
          exit 1
        fi

        # Test health check
        for i in {1..5}; do
          if curl -f http://localhost:8080/health; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "Attempt $i/5 failed, retrying..."
          sleep 5
        done

        # Test page principale
        if curl -f http://localhost:8080/ > /tmp/homepage.html; then
          echo "‚úÖ Homepage accessible"
          # Test basique du contenu (chercher du HTML Angular)
          if grep -q "angular\|ng-\|app-root" /tmp/homepage.html; then
            echo "‚úÖ Angular content detected"
          else
            echo "‚ö†Ô∏è  Angular content not detected but page loads"
          fi
        else
          echo "‚ùå Homepage not accessible!"
          docker logs test-frontend
          exit 1
        fi

    - name: Container cleanup
      if: always()
      run: |
        docker stop test-frontend || true
        docker rm test-frontend || true

    # Sauvegarder l'image pour d'autres jobs si besoin
    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > frontend-image.tar.gz

    - name: Upload Docker image artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: frontend-image.tar.gz
        retention-days: 1

  # Job 4: Tests d'int√©gration (optionnel)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < frontend-image.tar.gz
        docker images

    - name: Run integration tests
      run: |
        # Lancer frontend + simuler backend (mock)
        docker run -d --name frontend-test -p 4200:80 ${{ env.DOCKER_IMAGE_NAME }}:latest

        sleep 15

        # Tests d'int√©gration basiques
        echo "Testing frontend routes..."

        # Test route principale
        curl -f http://localhost:4200/ || exit 1

        # Test routes SPA (doit retourner index.html)
        curl -f http://localhost:4200/projects || exit 1
        curl -f http://localhost:4200/dashboard || exit 1

        echo "‚úÖ Integration tests passed"

        docker stop frontend-test
        docker rm frontend-test

  # Job 5: Notification finale
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [test-and-build, security-audit, docker-build-test]
    if: always()

    steps:
    - name: Check overall status
      run: |
        if [[ "${{ needs.test-and-build.result }}" == "success" &&
              "${{ needs.security-audit.result }}" == "success" &&
              "${{ needs.docker-build-test.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed! Frontend ready for deployment"
          echo "üê≥ Docker image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
          echo "üì¶ Build artifacts available"
        else
          echo "‚ùå‚ùå‚ùå Some checks failed: "
          echo "- Tests & Build: ${{ needs.test-and-build.result }}"
          echo "- Security: ${{ needs.security-audit.result }}"
          echo "- Docker: ${{ needs.docker-build-test.result }}"
          exit 1
        fi

  # Job 6: Debug en cas d'√©chec
  debug-on-failure:
    name: Debug Information
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build-test]
    if: failure()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Environment debug
      run: |
        echo "=== Environment Info ==="
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Docker version: $(docker --version)"

        echo "=== Package.json info ==="
        echo "Project name: $(jq -r '.name' package.json)"
        echo "Version: $(jq -r '.version' package.json)"

        echo "=== Angular dependencies ==="
        npm ls @angular/core @angular/cli || true

        echo "=== Disk space ==="
        df -h

        echo "=== Recent commits ==="
        git log --oneline -5
