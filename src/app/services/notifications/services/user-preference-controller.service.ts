/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getUserPreferences } from '../fn/user-preference-controller/get-user-preferences';
import { GetUserPreferences$Params } from '../fn/user-preference-controller/get-user-preferences';
import { resetToDefaults } from '../fn/user-preference-controller/reset-to-defaults';
import { ResetToDefaults$Params } from '../fn/user-preference-controller/reset-to-defaults';
import { updateUserPreferences } from '../fn/user-preference-controller/update-user-preferences';
import { UpdateUserPreferences$Params } from '../fn/user-preference-controller/update-user-preferences';
import { UserPreference } from '../models/user-preference';

@Injectable({ providedIn: 'root' })
export class UserPreferenceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUserPreferences()` */
  static readonly GetUserPreferencesPath = '/api/notifications/preferences/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserPreferences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserPreferences$Response(params: GetUserPreferences$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPreference>> {
    return getUserPreferences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserPreferences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserPreferences(params: GetUserPreferences$Params, context?: HttpContext): Observable<UserPreference> {
    return this.getUserPreferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPreference>): UserPreference => r.body)
    );
  }

  /** Path part for operation `updateUserPreferences()` */
  static readonly UpdateUserPreferencesPath = '/api/notifications/preferences/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserPreferences()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserPreferences$Response(params: UpdateUserPreferences$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPreference>> {
    return updateUserPreferences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserPreferences$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserPreferences(params: UpdateUserPreferences$Params, context?: HttpContext): Observable<UserPreference> {
    return this.updateUserPreferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPreference>): UserPreference => r.body)
    );
  }

  /** Path part for operation `resetToDefaults()` */
  static readonly ResetToDefaultsPath = '/api/notifications/preferences/{userId}/reset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetToDefaults()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetToDefaults$Response(params: ResetToDefaults$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPreference>> {
    return resetToDefaults(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetToDefaults$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetToDefaults(params: ResetToDefaults$Params, context?: HttpContext): Observable<UserPreference> {
    return this.resetToDefaults$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPreference>): UserPreference => r.body)
    );
  }

}
