/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseBoolean } from '../models/api-response-boolean';
import { ApiResponseTenantDto } from '../models/api-response-tenant-dto';
import { checkSubdomainAvailability } from '../fn/tenant-controller/check-subdomain-availability';
import { CheckSubdomainAvailability$Params } from '../fn/tenant-controller/check-subdomain-availability';
import { createTenant } from '../fn/tenant-controller/create-tenant';
import { CreateTenant$Params } from '../fn/tenant-controller/create-tenant';
import { getCurrentTenant } from '../fn/tenant-controller/get-current-tenant';
import { GetCurrentTenant$Params } from '../fn/tenant-controller/get-current-tenant';

@Injectable({ providedIn: 'root' })
export class TenantControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTenant()` */
  static readonly CreateTenantPath = '/api/tenants/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTenant()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTenant$Response(params: CreateTenant$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTenantDto>> {
    return createTenant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTenant$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTenant(params: CreateTenant$Params, context?: HttpContext): Observable<ApiResponseTenantDto> {
    return this.createTenant$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTenantDto>): ApiResponseTenantDto => r.body)
    );
  }

  /** Path part for operation `getCurrentTenant()` */
  static readonly GetCurrentTenantPath = '/api/tenants/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentTenant()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentTenant$Response(params?: GetCurrentTenant$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTenantDto>> {
    return getCurrentTenant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentTenant$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentTenant(params?: GetCurrentTenant$Params, context?: HttpContext): Observable<ApiResponseTenantDto> {
    return this.getCurrentTenant$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTenantDto>): ApiResponseTenantDto => r.body)
    );
  }

  /** Path part for operation `checkSubdomainAvailability()` */
  static readonly CheckSubdomainAvailabilityPath = '/api/tenants/check-subdomain/{subdomain}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkSubdomainAvailability()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkSubdomainAvailability$Response(params: CheckSubdomainAvailability$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseBoolean>> {
    return checkSubdomainAvailability(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkSubdomainAvailability$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkSubdomainAvailability(params: CheckSubdomainAvailability$Params, context?: HttpContext): Observable<ApiResponseBoolean> {
    return this.checkSubdomainAvailability$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseBoolean>): ApiResponseBoolean => r.body)
    );
  }

}
