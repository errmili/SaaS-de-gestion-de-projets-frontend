/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseListTaskDto } from '../models/api-response-list-task-dto';
import { ApiResponsePageTaskDto } from '../models/api-response-page-task-dto';
import { ApiResponseTaskDto } from '../models/api-response-task-dto';
import { ApiResponseVoid } from '../models/api-response-void';
import { assignTask } from '../fn/task-controller/assign-task';
import { AssignTask$Params } from '../fn/task-controller/assign-task';
import { bulkUpdateTasks } from '../fn/task-controller/bulk-update-tasks';
import { BulkUpdateTasks$Params } from '../fn/task-controller/bulk-update-tasks';
import { changeTaskStatus } from '../fn/task-controller/change-task-status';
import { ChangeTaskStatus$Params } from '../fn/task-controller/change-task-status';
import { createTask } from '../fn/task-controller/create-task';
import { CreateTask$Params } from '../fn/task-controller/create-task';
import { deleteTask } from '../fn/task-controller/delete-task';
import { DeleteTask$Params } from '../fn/task-controller/delete-task';
import { getAllTasks1 } from '../fn/task-controller/get-all-tasks-1';
import { GetAllTasks1$Params } from '../fn/task-controller/get-all-tasks-1';
import { getMyTasks } from '../fn/task-controller/get-my-tasks';
import { GetMyTasks$Params } from '../fn/task-controller/get-my-tasks';
import { getOverdueTasks } from '../fn/task-controller/get-overdue-tasks';
import { GetOverdueTasks$Params } from '../fn/task-controller/get-overdue-tasks';
import { getTaskById } from '../fn/task-controller/get-task-by-id';
import { GetTaskById$Params } from '../fn/task-controller/get-task-by-id';
import { searchTasks } from '../fn/task-controller/search-tasks';
import { SearchTasks$Params } from '../fn/task-controller/search-tasks';
import { updateTask } from '../fn/task-controller/update-task';
import { UpdateTask$Params } from '../fn/task-controller/update-task';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTaskById()` */
  static readonly GetTaskByIdPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTaskDto>> {
    return getTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<ApiResponseTaskDto> {
    return this.getTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTaskDto>): ApiResponseTaskDto => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTaskDto>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<ApiResponseTaskDto> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTaskDto>): ApiResponseTaskDto => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/api/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `changeTaskStatus()` */
  static readonly ChangeTaskStatusPath = '/api/tasks/{taskId}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeTaskStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeTaskStatus$Response(params: ChangeTaskStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTaskDto>> {
    return changeTaskStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeTaskStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeTaskStatus(params: ChangeTaskStatus$Params, context?: HttpContext): Observable<ApiResponseTaskDto> {
    return this.changeTaskStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTaskDto>): ApiResponseTaskDto => r.body)
    );
  }

  /** Path part for operation `assignTask()` */
  static readonly AssignTaskPath = '/api/tasks/{taskId}/assign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTask$Response(params: AssignTask$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTaskDto>> {
    return assignTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTask(params: AssignTask$Params, context?: HttpContext): Observable<ApiResponseTaskDto> {
    return this.assignTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTaskDto>): ApiResponseTaskDto => r.body)
    );
  }

  /** Path part for operation `bulkUpdateTasks()` */
  static readonly BulkUpdateTasksPath = '/api/tasks/bulk';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bulkUpdateTasks()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  bulkUpdateTasks$Response(params: BulkUpdateTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return bulkUpdateTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bulkUpdateTasks$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  bulkUpdateTasks(params: BulkUpdateTasks$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.bulkUpdateTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `getAllTasks1()` */
  static readonly GetAllTasks1Path = '/api/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasks1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks1$Response(params: GetAllTasks1$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageTaskDto>> {
    return getAllTasks1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasks1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks1(params: GetAllTasks1$Params, context?: HttpContext): Observable<ApiResponsePageTaskDto> {
    return this.getAllTasks1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePageTaskDto>): ApiResponsePageTaskDto => r.body)
    );
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/api/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTaskDto>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<ApiResponseTaskDto> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTaskDto>): ApiResponseTaskDto => r.body)
    );
  }

  /** Path part for operation `searchTasks()` */
  static readonly SearchTasksPath = '/api/tasks/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTasks$Response(params: SearchTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListTaskDto>> {
    return searchTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTasks(params: SearchTasks$Params, context?: HttpContext): Observable<ApiResponseListTaskDto> {
    return this.searchTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListTaskDto>): ApiResponseListTaskDto => r.body)
    );
  }

  /** Path part for operation `getOverdueTasks()` */
  static readonly GetOverdueTasksPath = '/api/tasks/overdue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOverdueTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverdueTasks$Response(params: GetOverdueTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListTaskDto>> {
    return getOverdueTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOverdueTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverdueTasks(params: GetOverdueTasks$Params, context?: HttpContext): Observable<ApiResponseListTaskDto> {
    return this.getOverdueTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListTaskDto>): ApiResponseListTaskDto => r.body)
    );
  }

  /** Path part for operation `getMyTasks()` */
  static readonly GetMyTasksPath = '/api/tasks/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTasks$Response(params: GetMyTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListTaskDto>> {
    return getMyTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTasks(params: GetMyTasks$Params, context?: HttpContext): Observable<ApiResponseListTaskDto> {
    return this.getMyTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListTaskDto>): ApiResponseListTaskDto => r.body)
    );
  }

}
