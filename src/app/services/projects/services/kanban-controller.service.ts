/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseKanbanBoardDto } from '../models/api-response-kanban-board-dto';
import { ApiResponseVoid } from '../models/api-response-void';
import { getKanbanBoard } from '../fn/kanban-controller/get-kanban-board';
import { GetKanbanBoard$Params } from '../fn/kanban-controller/get-kanban-board';
import { moveTask } from '../fn/kanban-controller/move-task';
import { MoveTask$Params } from '../fn/kanban-controller/move-task';

@Injectable({ providedIn: 'root' })
export class KanbanControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `moveTask()` */
  static readonly MoveTaskPath = '/api/kanban/tasks/{taskId}/move';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moveTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveTask$Response(params: MoveTask$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return moveTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moveTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveTask(params: MoveTask$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.moveTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `getKanbanBoard()` */
  static readonly GetKanbanBoardPath = '/api/kanban/projects/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getKanbanBoard()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKanbanBoard$Response(params: GetKanbanBoard$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseKanbanBoardDto>> {
    return getKanbanBoard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getKanbanBoard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKanbanBoard(params: GetKanbanBoard$Params, context?: HttpContext): Observable<ApiResponseKanbanBoardDto> {
    return this.getKanbanBoard$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseKanbanBoardDto>): ApiResponseKanbanBoardDto => r.body)
    );
  }

}
