/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createQuickProject } from '../fn/test-controller/create-quick-project';
import { CreateQuickProject$Params } from '../fn/test-controller/create-quick-project';
import { createQuickTask } from '../fn/test-controller/create-quick-task';
import { CreateQuickTask$Params } from '../fn/test-controller/create-quick-task';
import { getAllProjects } from '../fn/test-controller/get-all-projects';
import { GetAllProjects$Params } from '../fn/test-controller/get-all-projects';
import { getAllTasks } from '../fn/test-controller/get-all-tasks';
import { GetAllTasks$Params } from '../fn/test-controller/get-all-tasks';
import { getProjectTasks } from '../fn/test-controller/get-project-tasks';
import { GetProjectTasks$Params } from '../fn/test-controller/get-project-tasks';
import { getSimpleKanban } from '../fn/test-controller/get-simple-kanban';
import { GetSimpleKanban$Params } from '../fn/test-controller/get-simple-kanban';
import { getStats } from '../fn/test-controller/get-stats';
import { GetStats$Params } from '../fn/test-controller/get-stats';
import { ping } from '../fn/test-controller/ping';
import { Ping$Params } from '../fn/test-controller/ping';
import { SimpleProjectDto } from '../models/simple-project-dto';
import { SimpleTaskDto } from '../models/simple-task-dto';
import { updateTaskStatus } from '../fn/test-controller/update-task-status';
import { UpdateTaskStatus$Params } from '../fn/test-controller/update-task-status';

@Injectable({ providedIn: 'root' })
export class TestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTaskStatus()` */
  static readonly UpdateTaskStatusPath = '/api/test/tasks/{taskId}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus$Response(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<SimpleTaskDto>> {
    return updateTaskStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStatus(params: UpdateTaskStatus$Params, context?: HttpContext): Observable<SimpleTaskDto> {
    return this.updateTaskStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimpleTaskDto>): SimpleTaskDto => r.body)
    );
  }

  /** Path part for operation `createQuickTask()` */
  static readonly CreateQuickTaskPath = '/api/test/tasks/quick';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createQuickTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuickTask$Response(params: CreateQuickTask$Params, context?: HttpContext): Observable<StrictHttpResponse<SimpleTaskDto>> {
    return createQuickTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createQuickTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuickTask(params: CreateQuickTask$Params, context?: HttpContext): Observable<SimpleTaskDto> {
    return this.createQuickTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimpleTaskDto>): SimpleTaskDto => r.body)
    );
  }

  /** Path part for operation `createQuickProject()` */
  static readonly CreateQuickProjectPath = '/api/test/projects/quick';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createQuickProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuickProject$Response(params: CreateQuickProject$Params, context?: HttpContext): Observable<StrictHttpResponse<SimpleProjectDto>> {
    return createQuickProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createQuickProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuickProject(params: CreateQuickProject$Params, context?: HttpContext): Observable<SimpleProjectDto> {
    return this.createQuickProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimpleProjectDto>): SimpleProjectDto => r.body)
    );
  }

  /** Path part for operation `getAllTasks()` */
  static readonly GetAllTasksPath = '/api/test/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks$Response(params?: GetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SimpleTaskDto>>> {
    return getAllTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks(params?: GetAllTasks$Params, context?: HttpContext): Observable<Array<SimpleTaskDto>> {
    return this.getAllTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SimpleTaskDto>>): Array<SimpleTaskDto> => r.body)
    );
  }

  /** Path part for operation `getStats()` */
  static readonly GetStatsPath = '/api/test/stats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStats$Response(params?: GetStats$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getStats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStats(params?: GetStats$Params, context?: HttpContext): Observable<{
}> {
    return this.getStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllProjects()` */
  static readonly GetAllProjectsPath = '/api/test/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects$Response(params?: GetAllProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SimpleProjectDto>>> {
    return getAllProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects(params?: GetAllProjects$Params, context?: HttpContext): Observable<Array<SimpleProjectDto>> {
    return this.getAllProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SimpleProjectDto>>): Array<SimpleProjectDto> => r.body)
    );
  }

  /** Path part for operation `getProjectTasks()` */
  static readonly GetProjectTasksPath = '/api/test/projects/{projectId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTasks$Response(params: GetProjectTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SimpleTaskDto>>> {
    return getProjectTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTasks(params: GetProjectTasks$Params, context?: HttpContext): Observable<Array<SimpleTaskDto>> {
    return this.getProjectTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SimpleTaskDto>>): Array<SimpleTaskDto> => r.body)
    );
  }

  /** Path part for operation `getSimpleKanban()` */
  static readonly GetSimpleKanbanPath = '/api/test/projects/{projectId}/kanban';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSimpleKanban()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSimpleKanban$Response(params: GetSimpleKanban$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getSimpleKanban(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSimpleKanban$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSimpleKanban(params: GetSimpleKanban$Params, context?: HttpContext): Observable<{
}> {
    return this.getSimpleKanban$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `ping()` */
  static readonly PingPath = '/api/test/ping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ping()` instead.
   *
   * This method doesn't expect any request body.
   */
  ping$Response(params?: Ping$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return ping(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ping$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ping(params?: Ping$Params, context?: HttpContext): Observable<string> {
    return this.ping$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
