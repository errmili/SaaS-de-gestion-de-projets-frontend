/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProjectMember } from '../fn/project-controller/add-project-member';
import { AddProjectMember$Params } from '../fn/project-controller/add-project-member';
import { ApiResponseListProjectDto } from '../models/api-response-list-project-dto';
import { ApiResponseProjectDto } from '../models/api-response-project-dto';
import { ApiResponseVoid } from '../models/api-response-void';
import { createProject } from '../fn/project-controller/create-project';
import { CreateProject$Params } from '../fn/project-controller/create-project';
import { deleteProject } from '../fn/project-controller/delete-project';
import { DeleteProject$Params } from '../fn/project-controller/delete-project';
import { getAllProjects1 } from '../fn/project-controller/get-all-projects-1';
import { GetAllProjects1$Params } from '../fn/project-controller/get-all-projects-1';
import { getProjectById } from '../fn/project-controller/get-project-by-id';
import { GetProjectById$Params } from '../fn/project-controller/get-project-by-id';
import { getUserProjects } from '../fn/project-controller/get-user-projects';
import { GetUserProjects$Params } from '../fn/project-controller/get-user-projects';
import { removeProjectMember } from '../fn/project-controller/remove-project-member';
import { RemoveProjectMember$Params } from '../fn/project-controller/remove-project-member';
import { searchProjects } from '../fn/project-controller/search-projects';
import { SearchProjects$Params } from '../fn/project-controller/search-projects';
import { updateProject } from '../fn/project-controller/update-project';
import { UpdateProject$Params } from '../fn/project-controller/update-project';

@Injectable({ providedIn: 'root' })
export class ProjectControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProjectById()` */
  static readonly GetProjectByIdPath = '/api/projects/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectById$Response(params: GetProjectById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseProjectDto>> {
    return getProjectById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectById(params: GetProjectById$Params, context?: HttpContext): Observable<ApiResponseProjectDto> {
    return this.getProjectById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseProjectDto>): ApiResponseProjectDto => r.body)
    );
  }

  /** Path part for operation `updateProject()` */
  static readonly UpdateProjectPath = '/api/projects/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProject$Response(params: UpdateProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseProjectDto>> {
    return updateProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProject(params: UpdateProject$Params, context?: HttpContext): Observable<ApiResponseProjectDto> {
    return this.updateProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseProjectDto>): ApiResponseProjectDto => r.body)
    );
  }

  /** Path part for operation `deleteProject()` */
  static readonly DeleteProjectPath = '/api/projects/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject$Response(params: DeleteProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return deleteProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProject(params: DeleteProject$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.deleteProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `getAllProjects1()` */
  static readonly GetAllProjects1Path = '/api/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProjects1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects1$Response(params: GetAllProjects1$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListProjectDto>> {
    return getAllProjects1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProjects1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProjects1(params: GetAllProjects1$Params, context?: HttpContext): Observable<ApiResponseListProjectDto> {
    return this.getAllProjects1$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListProjectDto>): ApiResponseListProjectDto => r.body)
    );
  }

  /** Path part for operation `createProject()` */
  static readonly CreateProjectPath = '/api/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProject$Response(params: CreateProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseProjectDto>> {
    return createProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProject(params: CreateProject$Params, context?: HttpContext): Observable<ApiResponseProjectDto> {
    return this.createProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseProjectDto>): ApiResponseProjectDto => r.body)
    );
  }

  /** Path part for operation `addProjectMember()` */
  static readonly AddProjectMemberPath = '/api/projects/{projectId}/members';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProjectMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectMember$Response(params: AddProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return addProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProjectMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProjectMember(params: AddProjectMember$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.addProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `searchProjects()` */
  static readonly SearchProjectsPath = '/api/projects/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProjects$Response(params: SearchProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListProjectDto>> {
    return searchProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProjects(params: SearchProjects$Params, context?: HttpContext): Observable<ApiResponseListProjectDto> {
    return this.searchProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListProjectDto>): ApiResponseListProjectDto => r.body)
    );
  }

  /** Path part for operation `getUserProjects()` */
  static readonly GetUserProjectsPath = '/api/projects/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserProjects$Response(params: GetUserProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListProjectDto>> {
    return getUserProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserProjects(params: GetUserProjects$Params, context?: HttpContext): Observable<ApiResponseListProjectDto> {
    return this.getUserProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListProjectDto>): ApiResponseListProjectDto => r.body)
    );
  }

  /** Path part for operation `removeProjectMember()` */
  static readonly RemoveProjectMemberPath = '/api/projects/{projectId}/members/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeProjectMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProjectMember$Response(params: RemoveProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return removeProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeProjectMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProjectMember(params: RemoveProjectMember$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.removeProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

}
