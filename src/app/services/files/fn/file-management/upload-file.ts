/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ApiResponseFileDto } from '../../models/api-response-file-dto';

export interface UploadFile$Params {
  folderId?: string;
  entityType?: string;
  entityId?: string;
  isPublic?: boolean;
  allowDuplicates?: boolean;
  Authorization: string;
      body?: {
'file': Blob;
}
}

export function uploadFile(http: HttpClient, rootUrl: string, params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFileDto>> {
  const rb = new RequestBuilder(rootUrl, uploadFile.PATH, 'post');
  if (params) {
    rb.query('folderId', params.folderId, {});
    rb.query('entityType', params.entityType, {});
    rb.query('entityId', params.entityId, {});
    rb.query('isPublic', params.isPublic, {});
    rb.query('allowDuplicates', params.allowDuplicates, {});
    rb.header('Authorization', params.Authorization, {});
    rb.body(params.body, 'multipart/form-data');
  }

return http.request(
  rb.build({ responseType: 'json', accept: 'application/json', context })
).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ApiResponseFileDto>;
    })
  );
}

uploadFile.PATH = '/api/files/upload';
