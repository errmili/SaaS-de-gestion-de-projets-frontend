/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseFolderDto } from '../models/api-response-folder-dto';
import { ApiResponseListFolderDto } from '../models/api-response-list-folder-dto';
import { ApiResponseVoid } from '../models/api-response-void';
import { createFolder } from '../fn/folder-management/create-folder';
import { CreateFolder$Params } from '../fn/folder-management/create-folder';
import { deleteFolder } from '../fn/folder-management/delete-folder';
import { DeleteFolder$Params } from '../fn/folder-management/delete-folder';
import { getFolder } from '../fn/folder-management/get-folder';
import { GetFolder$Params } from '../fn/folder-management/get-folder';
import { getFolderTree } from '../fn/folder-management/get-folder-tree';
import { GetFolderTree$Params } from '../fn/folder-management/get-folder-tree';


/**
 * API pour la gestion des dossiers
 */
@Injectable({ providedIn: 'root' })
export class FolderManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFolderTree()` */
  static readonly GetFolderTreePath = '/api/folders';

  /**
   * Obtenir l'arborescence des dossiers.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFolderTree()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolderTree$Response(params: GetFolderTree$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListFolderDto>> {
    return getFolderTree(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtenir l'arborescence des dossiers.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFolderTree$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolderTree(params: GetFolderTree$Params, context?: HttpContext): Observable<ApiResponseListFolderDto> {
    return this.getFolderTree$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListFolderDto>): ApiResponseListFolderDto => r.body)
    );
  }

  /** Path part for operation `createFolder()` */
  static readonly CreateFolderPath = '/api/folders';

  /**
   * Créer un nouveau dossier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFolder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFolder$Response(params: CreateFolder$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFolderDto>> {
    return createFolder(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer un nouveau dossier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFolder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFolder(params: CreateFolder$Params, context?: HttpContext): Observable<ApiResponseFolderDto> {
    return this.createFolder$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseFolderDto>): ApiResponseFolderDto => r.body)
    );
  }

  /** Path part for operation `getFolder()` */
  static readonly GetFolderPath = '/api/folders/{folderId}';

  /**
   * Obtenir un dossier par ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFolder()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolder$Response(params: GetFolder$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFolderDto>> {
    return getFolder(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtenir un dossier par ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFolder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolder(params: GetFolder$Params, context?: HttpContext): Observable<ApiResponseFolderDto> {
    return this.getFolder$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseFolderDto>): ApiResponseFolderDto => r.body)
    );
  }

  /** Path part for operation `deleteFolder()` */
  static readonly DeleteFolderPath = '/api/folders/{folderId}';

  /**
   * Supprimer un dossier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFolder()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFolder$Response(params: DeleteFolder$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return deleteFolder(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un dossier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFolder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFolder(params: DeleteFolder$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.deleteFolder$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

}
