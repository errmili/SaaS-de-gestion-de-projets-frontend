/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseFileDto } from '../models/api-response-file-dto';
import { ApiResponseFileShareDto } from '../models/api-response-file-share-dto';
import { ApiResponseListFileDto } from '../models/api-response-list-file-dto';
import { ApiResponsePageFileDto } from '../models/api-response-page-file-dto';
import { ApiResponseVoid } from '../models/api-response-void';
import { deleteFile } from '../fn/file-management/delete-file';
import { DeleteFile$Params } from '../fn/file-management/delete-file';
import { downloadFile } from '../fn/file-management/download-file';
import { DownloadFile$Params } from '../fn/file-management/download-file';
import { getFile } from '../fn/file-management/get-file';
import { GetFile$Params } from '../fn/file-management/get-file';
import { getFiles } from '../fn/file-management/get-files';
import { GetFiles$Params } from '../fn/file-management/get-files';
import { getFolderFiles } from '../fn/file-management/get-folder-files';
import { GetFolderFiles$Params } from '../fn/file-management/get-folder-files';
import { searchFiles } from '../fn/file-management/search-files';
import { SearchFiles$Params } from '../fn/file-management/search-files';
import { shareFile } from '../fn/file-management/share-file';
import { ShareFile$Params } from '../fn/file-management/share-file';
import { uploadFile } from '../fn/file-management/upload-file';
import { UploadFile$Params } from '../fn/file-management/upload-file';


/**
 * API pour la gestion des fichiers
 */
@Injectable({ providedIn: 'root' })
export class FileManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `shareFile()` */
  static readonly ShareFilePath = '/api/files/{fileId}/share';

  /**
   * Partager un fichier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shareFile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shareFile$Response(params: ShareFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFileShareDto>> {
    return shareFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Partager un fichier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shareFile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shareFile(params: ShareFile$Params, context?: HttpContext): Observable<ApiResponseFileShareDto> {
    return this.shareFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseFileShareDto>): ApiResponseFileShareDto => r.body)
    );
  }

  /** Path part for operation `uploadFile()` */
  static readonly UploadFilePath = '/api/files/upload';

  /**
   * Upload d'un fichier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile$Response(params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFileDto>> {
    return uploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload d'un fichier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile(params: UploadFile$Params, context?: HttpContext): Observable<ApiResponseFileDto> {
    return this.uploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseFileDto>): ApiResponseFileDto => r.body)
    );
  }

  /** Path part for operation `getFiles()` */
  static readonly GetFilesPath = '/api/files';

  /**
   * Lister les fichiers avec pagination.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFiles$Response(params: GetFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageFileDto>> {
    return getFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * Lister les fichiers avec pagination.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFiles(params: GetFiles$Params, context?: HttpContext): Observable<ApiResponsePageFileDto> {
    return this.getFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePageFileDto>): ApiResponsePageFileDto => r.body)
    );
  }

  /** Path part for operation `getFile()` */
  static readonly GetFilePath = '/api/files/{fileId}';

  /**
   * Obtenir les informations d'un fichier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFile$Response(params: GetFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseFileDto>> {
    return getFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtenir les informations d'un fichier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFile(params: GetFile$Params, context?: HttpContext): Observable<ApiResponseFileDto> {
    return this.getFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseFileDto>): ApiResponseFileDto => r.body)
    );
  }

  /** Path part for operation `deleteFile()` */
  static readonly DeleteFilePath = '/api/files/{fileId}';

  /**
   * Supprimer un fichier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFile$Response(params: DeleteFile$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return deleteFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un fichier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFile(params: DeleteFile$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.deleteFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

  /** Path part for operation `downloadFile()` */
  static readonly DownloadFilePath = '/api/files/{fileId}/download';

  /**
   * Télécharger un fichier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadFile$Response(params: DownloadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Télécharger un fichier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadFile(params: DownloadFile$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `searchFiles()` */
  static readonly SearchFilesPath = '/api/files/search';

  /**
   * Rechercher des fichiers.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchFiles$Response(params: SearchFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListFileDto>> {
    return searchFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des fichiers.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchFiles(params: SearchFiles$Params, context?: HttpContext): Observable<ApiResponseListFileDto> {
    return this.searchFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListFileDto>): ApiResponseListFileDto => r.body)
    );
  }

  /** Path part for operation `getFolderFiles()` */
  static readonly GetFolderFilesPath = '/api/files/folder/{folderId}';

  /**
   * Obtenir les fichiers d'un dossier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFolderFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolderFiles$Response(params: GetFolderFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListFileDto>> {
    return getFolderFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtenir les fichiers d'un dossier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFolderFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFolderFiles(params: GetFolderFiles$Params, context?: HttpContext): Observable<ApiResponseListFileDto> {
    return this.getFolderFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListFileDto>): ApiResponseListFileDto => r.body)
    );
  }

}
